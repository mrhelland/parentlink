{"version":3,"file":"studentsearch.min.js","sources":["../src/studentsearch.js"],"sourcesContent":["/**\n * @module     local_parentlink/studentsearch\n * @copyright  2025\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n * Enables AJAX-powered student searching for the Parent Link Manager form.\n */\ndefine(['jquery'], function($) {\n\n      /**\n     * Initializes the student search field to perform AJAX lookups and\n     * dynamically update the student listbox. This function is called by\n     * Moodle's AMD loader when the page is ready.\n     *\n     * @function init\n     * @returns {void}\n     */\n    function init() {\n        const searchField = $('#id_studentsearch');\n        const listbox = $('#id_studentids');\n\n        if (M.cfg.developerdebug) {\n            // eslint-disable-next-line no-console\n            console.log('local_parentlink/studentsearch loaded (run \"grunt amd\" if stale)');\n        }\n\n        /**\n         * Executes an AJAX search and merges new results into the listbox.\n         */\n        function runSearch() {\n            const query = searchField.val().trim();\n            if (!query.length) {\n                return;\n            }\n\n            // âœ… Clear the search box immediately after initiating the search\n            searchField.val('');\n\n            // --- Show temporary loading indicator ---\n            const loadingText = 'Loading...';\n            const existingOptions = listbox.find('option').clone(true); // keep old ones\n            const loadingOption = $('<option>', {\n                text: loadingText,\n                disabled: true,\n                selected: true\n            });\n            listbox.empty().append(loadingOption);\n\n            $.ajax({\n                url: M.cfg.wwwroot + '/local/parentlink/ajax.php?sesskey=' + M.cfg.sesskey,\n                method: 'GET',\n                data: { term: query },\n                dataType: 'json',\n                success: function(results) {\n                    listbox.empty(); // remove Loading...\n                    // Reinsert previous results\n                    existingOptions.each(function() {\n                        listbox.append($(this));\n                    });\n\n                    if (!Array.isArray(results)) {\n                        return;\n                    }\n\n                    const existingIds = new Set(listbox.find('option').map(function() {\n                        return $(this).val();\n                    }).get());\n\n                    if (results.length === 0) {\n                        listbox.append(\n                            $('<option>', { text: 'No results found', disabled: true })\n                        );\n                    } else {\n                        results.forEach(function(item) {\n                            if (!existingIds.has(String(item.id))) {\n                                listbox.append(\n                                    $('<option>', { value: item.id, text: item.name })\n                                );\n                            }\n                        });\n                    }\n\n                    listbox.trigger('change'); // Refresh enhanced widgets\n                },\n                error: function() {\n                    listbox.empty().append(\n                        $('<option>', { text: 'Search failed', disabled: true })\n                    );\n                    alert('Search failed. Please try again.');\n                }\n            });\n        }\n\n        // Trigger search when pressing Enter in the search box.\n        searchField.on('keydown', function(e) {\n            if (e.key === 'Enter' || e.which === 13) {\n                e.preventDefault();\n                runSearch();\n            }\n        });\n\n    }\n\n    return { init: init };\n});\n"],"names":["define","$","init","searchField","listbox","M","cfg","developerdebug","console","log","on","e","key","which","preventDefault","query","val","trim","length","existingOptions","find","clone","loadingOption","text","disabled","selected","empty","append","ajax","url","wwwroot","sesskey","method","data","term","dataType","success","results","each","this","Array","isArray","existingIds","Set","map","get","forEach","item","has","String","id","value","name","trigger","error","alert","runSearch"],"mappings":";;;;;;;AAOAA,wCAAO,CAAC,WAAW,SAASC,SAgGjB,CAAEC,sBArFCC,YAAcF,EAAE,qBAChBG,QAAUH,EAAE,kBAEdI,EAAEC,IAAIC,gBAENC,QAAQC,IAAI,oEAuEhBN,YAAYO,GAAG,WAAW,SAASC,GACjB,UAAVA,EAAEC,KAA+B,KAAZD,EAAEE,QACvBF,EAAEG,kCAlEAC,MAAQZ,YAAYa,MAAMC,WAC3BF,MAAMG,cAKXf,YAAYa,IAAI,UAIVG,gBAAkBf,QAAQgB,KAAK,UAAUC,OAAM,GAC/CC,cAAgBrB,EAAE,WAAY,CAChCsB,KAHgB,aAIhBC,UAAU,EACVC,UAAU,IAEdrB,QAAQsB,QAAQC,OAAOL,eAEvBrB,EAAE2B,KAAK,CACHC,IAAKxB,EAAEC,IAAIwB,QAAU,sCAAwCzB,EAAEC,IAAIyB,QACnEC,OAAQ,MACRC,KAAM,CAAEC,KAAMnB,OACdoB,SAAU,OACVC,QAAS,SAASC,YACdjC,QAAQsB,QAERP,gBAAgBmB,MAAK,WACjBlC,QAAQuB,OAAO1B,EAAEsC,WAGhBC,MAAMC,QAAQJ,sBAIbK,YAAc,IAAIC,IAAIvC,QAAQgB,KAAK,UAAUwB,KAAI,kBAC5C3C,EAAEsC,MAAMvB,SAChB6B,OAEoB,IAAnBR,QAAQnB,OACRd,QAAQuB,OACJ1B,EAAE,WAAY,CAAEsB,KAAM,mBAAoBC,UAAU,KAGxDa,QAAQS,SAAQ,SAASC,MAChBL,YAAYM,IAAIC,OAAOF,KAAKG,MAC7B9C,QAAQuB,OACJ1B,EAAE,WAAY,CAAEkD,MAAOJ,KAAKG,GAAI3B,KAAMwB,KAAKK,WAM3DhD,QAAQiD,QAAQ,WAEpBC,MAAO,WACHlD,QAAQsB,QAAQC,OACZ1B,EAAE,WAAY,CAAEsB,KAAM,gBAAiBC,UAAU,KAErD+B,MAAM,uCASVC"}